#include "defs.h"
#include "floatOperations.h"
#include "signZero.h"
#include "gradualUnderflow.h"
using namespace std;

int main() {
	/*observe integeroveflows*/
	int x1 = IntegerOverflows();
	if (x1 < 0)
		cout << "Integer overflow occurs according to IEEE standard" << endl;
	else
		cout << "Integer overflow did not occur" << endl;

	///*observe integer divided by zero*/
	//try {
	//	integerDividedByZero();
	//}
	//catch (exception) {
	//	cout << "integer divided by zero generate infinity according to ieee standard" << endl;
	//}

		
	/*floating-point overflows*/
	double x3 = floatOverflows();
	if(x3 < 0) 
		cout << "floating-point overflow occurs according to ieee standard" << endl;
	else
		cout << "Floating overflow did not occur" << endl;


	/*Floating-point operations of INF and NINF*/

	/**Generate*/
	double x4 = geneINF();
	double x5 = geneNINF();
	double x6 = geneNaN();
	cout << "genetate INF,NINF,NAN" <<"\n"<< x4 << " " << x5 << " " << x6 << endl;

	/**Varify the number generated by gene_functions, return true if they are right*/
	bool isINF(x4);
	bool isNINF(x5);
	bool isNaN(x6);

	/**observe their behavior in functions*/
	floatingPointOperations();
	cout << "INF, NINF, NAN behaves consistent with IEEE standard" << endl;

	/*Signed zero*/
	double s1 = logPZ();
	double s2 = logPZ();
	double s3 = sincPZ();
	double s4 = sincNZ();
	double s5 = sincNZA();
	cout << s1 << endl;
	cout << s2 << endl;
	cout << s3 << endl;
	cout << s4 << endl;
	cout << s5 << endl;
	cout << "signed zero in the function behaves consistient with IEEE standard" << endl;

	/*floating point gradual underflow*/
	subUnderflow();
	divUnderflow();
	sinUnderflow();

	//ADD IF STATEMENT HERE
	// modify the function so that it donedn't print out, observe inside the funxtion and give the result
	//using a equation or something
	cout << "gradual underflow occurs agree with IEEE standard" << endl;

	system("pause");
	return 0;
}